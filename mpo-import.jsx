(function(thisObj){// basic panelmpo_import(thisObj);#include "Debugger.jsx";var deeBug = null; function mpo_import(thisObj){var mpo2ae =  {  'version': '0.0',  'json':null,  'pre_articles':[],  'articles':[],  'json_file':null,  'images_folder_flat':null,  'project':null,  'toml':null,  'allfolders':[],  'settings':{    /* These are fallback values and will be overwritten / patched in setup from TOML */    'title' : "MPO 2 title fallback",    'projectname' : "MPO import",    'comp':{      'width':1920,      'height':1080,      'duration':10,      'pixelAspect':1,      'frameRate':25,      'layerpresets':{        'shapesetting': "[JM Medienbespielung] LogoShapeSettings.ffx",        'adjustment': "[JM Medienbespielung] Adjustment.ffx",        'bg': "[JM Medienbespielung] BGColorize.ffx",        'product': "[JM Medienbespielung] Product.ffx",        'text': "[JM Medienbespielung] TextGlow.ffx",        "path":"/Applications/Adobe After Effects CS6/Presets/User Presets/JM Medienbespielung/"      },      'render':{        'ommodule':"fallback",        'folder':null      }    },    'images':{      'width':1920,      'height':1080,      'duration':20,      'pixelAspect':1,      'frameRate':25,      'layerpresets':{        'item': "_afx/image_item_fallback.afx"      }    }    /* End of TOML data */  },    'menuCommand' : {        'en': "Create Shapes from Vector Layer",        'de': "Formen aus Vektorebene erstellen"        }};///   THIS WILL CHECK IF PANEL IS DOCKABLE OR FLAOTING WINDOW  var win   = buildUI(thisObj );if ((win !== null) && (win instanceof Window)) {    win.center();    win.show();} // end if win  null and not a instance of window  function buildUI (thisObj  ) {    var win = (thisObj instanceof Panel) ? thisObj :  new Window('palette', 'FSS Fake Parallax',[0,0,150,260],{resizeable: true});    if (win !== null) {var red =  win.graphics.newPen (win.graphics.PenType.SOLID_COLOR, [1, 0.1, 0.1],1);var green =  win.graphics.newPen (win.graphics.PenType.SOLID_COLOR, [0.1, 1, 0.1],1);        var H = 25; // the height        var W = 30; // the width        var G = 5; // the gutter        var x = G;        var y = G;        // win.check_box = win.add('checkbox',[x,y,x+W*2,y + H],'check');        // win.check_box.value = metaObject.setting1;        win.select_json_button = win.add('button',[x ,y,x+W*5,y + H], 'read json');        x+=(W*5)+G;        win.read_label = win.add('statictext',[x ,y,x+W*5,y + H],'NO JSON');        win.read_label.graphics.foregroundColor = red;        x=G;        y+=H+G;        win.do_it_button = win.add('button', [x ,y,x+W*5,y + H], 'simple import');        x=G;        y+=H+G;        win.regen_it_button = win.add('button', [x ,y,x+W*5,y + H], 'regenerate');        x=G;        y+=H+G;        win.prepare_logo_button = win.add('button', [x ,y,x+W*5,y + H], 'prepare logo');        // win.up_button = win.add('button', [x + W*5+ G,y,x + W*6,y + H], 'Up');         // win.check_box.onClick = function (){        //     alert("check");        // };        //        //    win.select_json_button.addEventListener ("click", function (k) {      /**       * if you hold alt you can clear the the json and all that stuff       *        */      if (k.altKey) {      mpo2ae.images_folder_flat = null;      mpo2ae.json = null;      mpo2ae.allfolders.length = 0;      mpo2ae.pre_articles.length = 0;      mpo2ae.articles.length = 0;      win.read_label.text = 'NO JSON';      win.read_label.graphics.foregroundColor = red;      }else{// win.select_json_button.onClick = function () {        /**         * Why is this in here?         * Because we can make changed to the GUI from the function         * makeing some overview for the JSON and stuff like that         *         */  mpo2ae.project = app.project;  var presets = mpo2ae.settings.comp.layerpresets;  var jsonFile = File.openDialog("Select a JSON file to import.", "*.*",false);  // var path = ((new File($.fileName)).path);  if (jsonFile !== null) {    mpo2ae.images_folder_flat = jsonFile.parent;    var textLines = [];    jsonFile.open("r", "TEXT", "????");    while (!jsonFile.eof){    textLines[textLines.length] = jsonFile.readln();    }  jsonFile.close();    var str = textLines.join("");  var reg = new RegExp("\n|\r","g");  str.replace (reg, " ");    // var reghack = new RegExp('"@a','g');    // str.replace(reghack, '"a');    mpo2ae.json = eval("(" + str + ")"); // evaluate the JSON code    if(mpo2ae.json !==null){      // alert('JSON file import worked fine');      // alert(mpo2ae.json);      win.read_label.text = 'YES JSON';      win.read_label.graphics.foregroundColor = green;      mpo2ae.pre_articles = mpo2ae.json.seite.artikel;//~       $.write(mpo2ae.pre_articles.toSource());      /**       * This is only cheking if ther are some folders already there       *        */      // var allfolders = [];      if(mpo2ae.pre_articles.length > 0){      var projItems = mpo2ae.project.items;      for(var f = 1; f <= projItems.length;f++){        if (projItems[f] instanceof FolderItem){          // alert(projItems[f]);          mpo2ae.allfolders.push(projItems[f]);        }      } // end folder loop        for(var i = 0; i < mpo2ae.pre_articles.length;i++){          var article = mpo2ae.pre_articles[i];          var artfolder = null;          var artimages = [];          var artnr  = null;          var artprice = null;          var arttxt = null;          var artname = null;          var artdiscr = null;          var artbrand = null;          var artfootage = [];          var artgroup = null;          if(article.hasOwnProperty('artikelInformation')){            ainfo = article.artikelInformation;            if(ainfo.hasOwnProperty('iArtikelNr')){              // artnr = ainfo.iArtikelNr;              // ------------ loop all folders per article ------------              if(mpo2ae.allfolders !== null){              for(var ff = 0; ff < mpo2ae.allfolders.length;ff++){                if(mpo2ae.allfolders[ff].name == ainfo.iArtikelNr){                  artfolder = mpo2ae.allfolders[ff];                  break;                }              } // close ff loop            } // close folder null check              // ------------ end loop all folders per article ------------              // if(artfolder === null){              //   artfolder = mpo2ae.project.items.addFolder(ainfo.iArtikelNr.toString());              // } // close artfolder null            }// close iArtikelNr check            if(ainfo.hasOwnProperty('iHersteller')){              artbrand = ainfo.iHersteller;            }            if(ainfo.hasOwnProperty('iGruppenFarbe')){              artgroup = ainfo.iGruppenFarbe;            }          } // close artikelInformation check          if(article.hasOwnProperty('preis')){            artprice = article.preis;          }          if(article.hasOwnProperty('textPlatzieren')){            if(article.textPlatzieren.hasOwnProperty('artikelBezeichnung')){              artname = article.textPlatzieren.artikelBezeichnung;            }            if(article.textPlatzieren.hasOwnProperty('artikelBeschreibung')){              artdiscr = article.textPlatzieren.artikelBeschreibung;            }            if(article.textPlatzieren.hasOwnProperty('artikelText')){              arttxt = article.textPlatzieren.artikelText;            }            if(article.textPlatzieren.hasOwnProperty('artikelNr')){              artnr = article.textPlatzieren.artikelNr;            }          }// ------------ this is start folder creation and image import ------------          if(artfolder !== null){            var imgpath = null;            if(article.hasOwnProperty('bild')){              if( Object.prototype.toString.call( article.bild ) === '[object Array]' ) {                // article.bild is an array                // lets loop it                //                 for(var j =0;j < article.bild.length;j++){                  if(article.bild[j].hasOwnProperty('attributes')){                    imgpath = article.bild[j].attributes.href.substring(8);                    artimages.push(imgpath);                    alert(imgpath);                    return;                  }// article bild is an Array attributes close                } // close J Loop              }else{                // now this is an error in the JSON                // the property 'bild' comes as Array OR Object                // we need to fix that                if(article.bild.hasOwnProperty('attributes')){                  artimages.push(article.bild.attributes.href.substring(8));                  alert(imgpath);                  return;                } // article bild is an object attributes close              }// close Object.prototype.toString.call( article.bild )              // alert( mpo2ae.images_folder_flat.fullName + "\n" + artimages);              // for(var ig = 0; ig < artimages.length;ig++){              //   var a_img = File( mpo2ae.images_folder_flat.fsName + "/" + artimages[ig]);              //   if(a_img.exists){              //   var footageitem  = mpo2ae.project.importFile(new ImportOptions(File(a_img)));              //   footageitem.parentFolder = artfolder;              //   artfootage.push(footageitem);              //   }else{              //     artfootage.push(null);              //   } // close else image does not exist on HD              // } // end of ig loop artimages            }else{              // artile has no property 'bild'              $.writeln('There are no images on article ' + ainfo.iArtikelNr);              // alert('There are no images on article ' + ainfo.iArtikelNr);            }          }else{            // it was not possible to create folders            // neither from the names nor did they exist            // alert('Error creating folder for import');          }// ------------ end of folder creation an image import ------------      // var curComp = mpo2ae.project.items.addComp(      //   mpo2ae.settings.projectname + " " + ainfo.iArtikelNr,      //   mpo2ae.settings.comp.width,      //   mpo2ae.settings.comp.height,      //   mpo2ae.settings.comp.pixelAspect,      //   mpo2ae.settings.comp.duration,      //   mpo2ae.settings.comp.frameRate);      //   curComp.parentFolder = artfolder;          // now we got all info togther and everything is checked          // we create an cleaned object with the props we need          // for later usage          var art = new Article();          art.nr = artnr;          art.folder = artfolder;          // art.images = artimages;          // var regdash = new RegExp("--","g");          art.price = regdashes(artprice);// artprice.replace(regdash,"\u2013");          art.txt = arttxt;          art.name = artname;          art.discr = artdiscr;          art.brand = artbrand;          art.footage = artfootage;          art.group = artgroup;          mpo2ae.articles.push(art);        } // end article loop    }else{      alert('No articles in JSON');    }  }else{    alert('JSON is null');  }}else{  alert('File is null');}      } // end else not alt      // };    }); // end of eventListener        win.do_it_button.onClick = function () {            simple_import();            alert('done');      };        win.regen_it_button.onClick = function () {            // simple_import();            if((app.project.selection < 1) && (!(app.project.selection[0] instanceof CompItem ))){              alert('Please select your template composition');              return;            }            regenerate_from_template(app.project.selection[0]);      };      win.prepare_logo_button.onClick = function  () {        prepare_selected_logo();      };    }    return win;}/** * The Article Object * right now only storage */function Article(){          this.nr  = null;          this.folder = null;          this.images = [];          this.price = null;          this.txt = null;          this.name = null;          this.group = null;          this.discr = null;          this.brand = null;          this.footage = [];          this.comp = null;          this.imgcomp = null;          this.rqitem = null;}function prepare_selected_logo () {app.beginUndoGroup("prepare logo mmpo import");if((app.project.selection < 1) && (!(app.project.selection[0] instanceof FootageItem ))){    alert('Please select an illustrator file');              return;            }var item = app.project.selection[0];var comp =  app.project.items.addComp(item.name, item.width, item.height, item.pixelAspect, 10, 25);var layer = comp.layers.add(item, comp.duration);        comp.openInViewer();  // just to make sure the comp's panel is frontmostlayer.selected = true;app.executeCommand(    app.findMenuCommandId(    rd_localize(mpo2ae.menuCommand)));var shapelayer = comp.layers[1];shapelayer.threeDLayer = true;var preset = File(mpo2ae.settings.comp.layerpresets.path + mpo2ae.settings.comp.layerpresets.shapesetting);if(!(preset.exists)){      alert('cant find the preset under:\n' +      mpo2ae.settings.comp.layerpresets.path +      mpo2ae.settings.comp.layerpresets.shapesetting      );    }else{shapelayer.applyPreset(preset);}app.endUndoGroup();}function regenerate_from_template(template){deeBug = new Debugger(true,"MPO IMPORT Template Patching","This is a alpha version");  deeBug.init();var selecter_win                     = new Window ('dialog','Article Selector Window'); // the new window    selecter_win.preferredSize       =    {'width':480,'height':450};    selecter_win.supergroup                 = selecter_win.add('group',undefined,'');    selecter_win.supergroup.orientation     ='column';    selecter_win.supergroup.alignment   = 'left';    selecter_win.rowboxes            = selecter_win.supergroup.add ('group');    selecter_win.rowboxes.orientation = 'column';    var the_checkboxes = [];    for(var sar = 0; sar < mpo2ae.articles.length;sar++){      var grp = selecter_win.rowboxes.add('group',undefined,'');      grp.orientation = 'row';      grp.alignment = 'left';      var chkbox = grp.add('checkbox',undefined,'');      chkbox.value = true;      the_checkboxes.push(chkbox);      grp.add('statictext',undefined, mpo2ae.articles[sar].group + ' ' + mpo2ae.articles[sar].nr);    }/* ----------------------------------------------- */    selecter_win.rowallselect            = selecter_win.supergroup.add ('group');    selecter_win.rowallselect.orientation = 'row';    selecter_win.rowallselect.alignment   = 'left';// ------------ the select deselct buttons ------------    selecter_win.rowallselect.select_all               = selecter_win.rowallselect.add ('button', undefined, 'select all');    selecter_win.rowallselect.deselect_all           = selecter_win.rowallselect.add ('button', undefined, 'deselct all');    selecter_win.rowallselect.select_all.onClick = function(){      for(var b = 0; b < the_checkboxes.length; b++){        the_checkboxes[b].value = true;      }    };    selecter_win.rowallselect.deselect_all.onClick = function(){      for(var b = 0; b < the_checkboxes.length; b++){        the_checkboxes[b].value = false;      }    };/* ----------------------------------------------- */    selecter_win.rowconfirm            = selecter_win.supergroup.add ('group');    selecter_win.rowconfirm.orientation = 'row';    selecter_win.rowconfirm.alignment   = 'right';// ------------ the comfirm or cancel buttons ------------    selecter_win.rowconfirm.ok               = selecter_win.rowconfirm.add ('button', undefined, 'OK');    selecter_win.rowconfirm.cancel           = selecter_win.rowconfirm.add ('button', undefined, 'Cancel');if (selecter_win.show () == 1){}else{  return;}// end dialog  for(var ar = 0; ar < mpo2ae.articles.length;ar++){    if(the_checkboxes[ar].value !== true){      continue;    }    var product = mpo2ae.articles[ar];    var curComp = template.duplicate();  var currentComp_template_layers = {    'product_img':null,    'price':null,    'name':null,    'discr':null,    'brand':null,    'oldprice':null  };    curComp.name = product.nr;    var patterns = [    {'type':0,'reg':('[JMName]')},    {'type':1,'reg':('[JMPrice]')},    {'type':2,'reg':('[JMProductImg]')},    {'type':3,'reg':('[JMDiscr]')},    {'type':4,'reg':('[JMBrand]')},    {'type':5,'reg':('[JMOldPrice]')}    ];    for (var i = 1; i <= curComp.numLayers;i++){      var lay = curComp.layers[i];      for(var r = 0; r < patterns.length;r++){        var reg = new RegExp(escapeRegExp( patterns[r].reg ) ,'g');        if(reg.test(lay.name) === true){          switch(patterns[r].type){            case 0:            currentComp_template_layers.name = lay;            // alert('Found ' + patterns[r].reg);            break;            case 1:            currentComp_template_layers.price = lay;            // alert('Found ' + patterns[r].reg);            break;            case 2:            currentComp_template_layers.product_img = lay;            // alert('Found ' + patterns[r].reg);            break;            case 3:            currentComp_template_layers.discr = lay;            // alert('Found ' + patterns[r].reg);            break;            case 4:            currentComp_template_layers.brand = lay;            // alert('Found ' + patterns[r].reg);            break;            case 5:            currentComp_template_layers.oldprice = lay;            break;            default:            alert('Found something with a none specified type');          } // end of switch        } // end of reg test          reg = null;      } // end of patterns loop    } // end of layer loop    /**     * NOW lets patch this     *      */     if((currentComp_template_layers.name !== null)&&(product.name !== null)){      patch_text(currentComp_template_layers.name , product.name, 'Product Name');     }     if((currentComp_template_layers.price !== null)&& (product.price !== null) ){      patch_text(currentComp_template_layers.price , product.price, 'Product Price');     }    if((currentComp_template_layers.oldprice !== null)&& (product.price !== null) ){      patch_text(currentComp_template_layers.oldprice ,'statt '+ product.price, 'Product Price');     }     if((currentComp_template_layers.discr !== null)&& (product.discr !== null)){      patch_text(currentComp_template_layers.discr , product.discr, 'Product Discription');     }      if((currentComp_template_layers.product_img !== null) && (product.product_img !== null)){      patch_footage_item(currentComp_template_layers.product_img , product.folder,product.nr);     }  }deeBug.write_infos();}function patch_text(textlayer, str, info){  if((typeof str == 'string' || str instanceof String)){    if(textlayer instanceof TextLayer){      textlayer.sourceText.setValue(str);    }  }else{    textlayer.guideLayer = true;    deeBug.addLineToInfo('Could not patch ' + info + '\n ' + str.toString() + ' <-- Not a string');    // alert('Could not patch ' + info + '\n ' + str.toString() + ' <-- Not a string');  }}function patch_footage_item(avlayer, folder, artnum){  var msg = 'Select a image file to import for "' + String(artnum) +'"';var aFile = File.openDialog(msg, '*.*',false);if(aFile === null){  avlayer.guideLayer = true;  return;}var footageitem  = mpo2ae.project.importFile(new ImportOptions(aFile));// if(folder === null){// folder = mpo2ae.project.addFolder(artnum + "MPO import");// }// footageitem.parentFolder(folder);avlayer.replaceSource(footageitem, true);}function patch_comp_item(comp){}function simple_import(){  // mpo2ae.project = app.project;  app.beginUndoGroup('MPO import');  var presets = mpo2ae.settings.comp.layerpresets;  // var jsonFile = File.openDialog("Select a JSON file to import.", "*.*",false);  // var path = ((new File($.fileName)).path);  // if (jsonFile !== null) {    // mpo2ae.images_folder_flat = jsonFile.parent;    // var textLines = [];    // jsonFile.open("r", "TEXT", "????");    // while (!jsonFile.eof){    // textLines[textLines.length] = jsonFile.readln();    // }  // jsonFile.close();    // var str = textLines.join("");  // var reg = new RegExp("\n|\r","g");  // str.replace (reg, " ");    // var reghack = new RegExp('"@a','g');    // str.replace(reghack, '"a');    // mpo2ae.json = eval("(" + str + ")"); // evaluate the JSON code    // if(mpo2ae.json !==null){      // alert('JSON file import worked fine');      // alert(mpo2ae.json);      // mpo2ae.pre_articles = mpo2ae.json.seite.artikel;//~       $.write(mpo2ae.pre_articles.toSource());      /**       * This is only cheking if ther are some folders already there       *        */    //   var allfolders = [];    //   if(mpo2ae.pre_articles.length > 0){    //   var projItems = app.project.items;    //   for(var f = 1; f <= projItems.length;f++){    //     if (projItems[f] instanceof FolderItem){    //       allfolders.push(projItems[f]);    //     }    //   }    // }    // END FOLDER CHECK    //         // alert('Found ' + mpo2ae.pre_articles.length + ' pre_articles');        for(var i = 0; i < mpo2ae.pre_articles.length;i++){          var article = mpo2ae.pre_articles[i];          var artfolder = null;          var artimages = [];          var artnr  = null;          var artprice = null;          var arttxt = null;          var artname = null;          var artdiscr = null;          var artbrand = null;          var artfootage = [];          if(article.hasOwnProperty('artikelInformation')){            ainfo = article.artikelInformation;            if(ainfo.hasOwnProperty('iArtikelNr')){              // artnr = ainfo.iArtikelNr;              // ------------ loop all folders per article ------------              if(mpo2ae.allfolders !== null){              for(var ff = 0; ff < mpo2ae.allfolders.length;ff++){                if(mpo2ae.allfolders[ff].name == ainfo.iArtikelNr){                  artfolder = mpo2ae.allfolders[ff];                  break;                }              } // close ff loop            } // close folder null check              // ------------ end loop all folders per article ------------              if(artfolder === null){                artfolder = mpo2ae.project.items.addFolder(ainfo.iArtikelNr.toString());              } // close artfolder null            }// close iArtikelNr check            if(ainfo.hasOwnProperty('iHersteller')){              artbrand = ainfo.iHersteller;            }          } // close artikelInformation check          if(article.hasOwnProperty('preis')){            artprice = article.preis;          }          if(article.hasOwnProperty('textPlatzieren')){            if(article.textPlatzieren.hasOwnProperty('artikelBezeichnung')){              artname = article.textPlatzieren.artikelBezeichnung;            }            if(article.textPlatzieren.hasOwnProperty('artikelBeschreibung')){              artdiscr = article.textPlatzieren.artikelBeschreibung;            }            if(article.textPlatzieren.hasOwnProperty('artikelText')){              arttxt = article.textPlatzieren.artikelText;            }            if(article.textPlatzieren.hasOwnProperty('artikelNr')){              artnr = article.textPlatzieren.artikelNr;            }          }// ------------ this is start folder creation and image import ------------          if(artfolder !== null){            var imgpath = null;            if(article.hasOwnProperty('bild')){              if( Object.prototype.toString.call( article.bild ) === '[object Array]' ) {                // article.bild is an array                // lets loop it                //                 for(var j =0;j < article.bild.length;j++){                  if(article.bild[j].hasOwnProperty('attributes')){                    imgpath = article.bild[j].attributes.href.substring(8);                    artimages.push(imgpath);                    alert(imgpath);                    return;                  }// article bild is an Array attributes close                } // close J Loop              }else{                // now this is an error in the JSON                // the property 'bild' comes as Array OR Object                // we need to fix that                if(article.bild.hasOwnProperty('attributes')){                  artimages.push(article.bild.attributes.href.substring(8));                  alert(imgpath);                  return;                } // article bild is an object attributes close              }// close Object.prototype.toString.call( article.bild )              // alert( mpo2ae.images_folder_flat.fullName + "\n" + artimages);              for(var ig = 0; ig < artimages.length;ig++){                var a_img = File( mpo2ae.images_folder_flat.fsName + "/" + artimages[ig]);                if(a_img.exists){                var footageitem  = mpo2ae.project.importFile(new ImportOptions(File(a_img)));                footageitem.parentFolder = artfolder;                artfootage.push(footageitem);                }else{                  artfootage.push(null);                } // close else image does not exist on HD              } // end of ig loop artimages            }else{              // artile has no property 'bild'              $.writeln('There are no images on article ' + ainfo.iArtikelNr);              // alert('There are no images on article ' + ainfo.iArtikelNr);            }          }else{            // it was not possible to create folders            // neither from the names nor did they exist            alert('Error creating folder for import');          }// ------------ end of folder creation an image import ------------      var curComp = mpo2ae.project.items.addComp(        mpo2ae.settings.projectname + " " + ainfo.iArtikelNr,        mpo2ae.settings.comp.width,        mpo2ae.settings.comp.height,        mpo2ae.settings.comp.pixelAspect,        mpo2ae.settings.comp.duration,        mpo2ae.settings.comp.frameRate);        curComp.parentFolder = artfolder;          // now we got all info togther and everything is checked          // we create an cleaned object with the props we need          // for later usage          var art = new Article();          art.nr = artnr;          art.folder = artfolder;          // art.images = artimages;          // var regdash = new RegExp("--","g");          art.price = regdashes(artprice);// artprice.replace(regdash,"\u2013");          art.txt = arttxt;          art.name = artname;          art.discr = artdiscr;          art.brand = artbrand;          art.footage = artfootage;          mpo2ae.articles.push(art);// if(is_empty(art.discr) === false){var textlayers = [];        try{          var pricelayer = curComp.layers.addText( art.price);        pricelayer.name = "price";        textlayers.push(pricelayer);      }catch(err){                pricelayer.name = "price";        textlayers.push(pricelayer);          $.writeln(err);        }      // }// if(is_empty(art.discr) === false){        try{var namelayer = curComp.layers.addText(art.name);        namelayer.name = "name";        textlayers.push(namelayer);      }catch(err){        namelayer.name = "name";        textlayers.push(namelayer);          $.writeln(err);        }  // }        // if(is_empty(art.discr) === false){          try{        var discrlayer =curComp.layers.addText( "" + art.discr);        discrlayer.name = "discr";        textlayers.push(discrlayer);      }catch(err){          var discrlayer =curComp.layers.addText( "discr");         discrlayer.name = "discr";        textlayers.push(discrlayer);          $.writeln(err);        }          try{        var oldpricelayer =curComp.layers.addText("statt € " + art.price);        oldpricelayer.name = "statt-price";        textlayers.push(oldpricelayer);      }catch(err){        oldpricelayer.name = "statt-price";        textlayers.push(oldpricelayer);          $.writeln(err);        }// tl.property("Source Text").setValue(textDocument);// property("ADBE Text Properties").property("ADBE Text Document")var textpreset = File(presets.path + presets.text);// if(textpreset.exists)for(var txt = 0; txt < textlayers.length; txt++){  var tl = textlayers[txt];var textProp = tl.property("Source Text");var textDocument = textProp.value;textDocument.fontSize = 150;textDocument.applyFill = true;textDocument.applyStroke = true;textDocument.strokeOverFill = false;textDocument.fillColor = [1,1,1];textDocument.strokeColor = [0, 0, 0];textDocument.strokeWidth = 15;textDocument.font = "MyriadPro-BlackIt";// // textDocument.text = myString;textDocument.justification = ParagraphJustification.CENTER_JUSTIFY;textDocument.tracking = 0;textProp.setValue(textDocument);tl.threeDLayer = true;tl.applyPreset((textpreset));try{}catch(e){  alert(e + "\nThe Text Preset is missing");}}        // }        var branddata = {          "color": [1,0,0],          "name": art.brand,          "width": 250,          "height": 250,          "pixelAspect": 1,          "duration": curComp.duration        };        var brandlayer = curComp.layers.addSolid(                          branddata.color,                          branddata.name,                          branddata.width,                          branddata.height,                          branddata.pixelAspect,                          branddata.duration                        );        brandlayer.threeDLayer = true;var productdummy = {          "color": [0,1,0],          "name": "productdummy",          "width": 500,          "height": 500,          "pixelAspect": 1,          "duration": curComp.duration        };        var productlayer = curComp.layers.addSolid(                          productdummy.color,                          productdummy.name,                          productdummy.width,                          productdummy.height,                          productdummy.pixelAspect,                          productdummy.duration                        );        productlayer.threeDLayer = true;        productlayer.applyPreset(File(presets.path + presets.product));        productlayer.moveToEnd();var bgdummy = {          "color": [0,1,0],          "name": "bgdummy",          "width": curComp.width,          "height": curComp.height,          "pixelAspect": 1,          "duration": curComp.duration        };        var bgdummylayer = curComp.layers.addSolid(                          bgdummy.color,                          bgdummy.name,                          bgdummy.width,                          bgdummy.height,                          bgdummy.pixelAspect,                          bgdummy.duration                        );        bgdummylayer.applyPreset(File(presets.path + presets.bg));        bgdummylayer.moveToEnd();        var newdummy = bgdummylayer.duplicate();        newdummy.name = "reveal dummy";var adjustmentlayer =curComp.layers.addSolid(                            [1,1,1],                          bgdummy.name,                          bgdummy.width,                          bgdummy.height,                          bgdummy.pixelAspect,                          bgdummy.duration);    adjustmentlayer.adjustmentLayer = true;    adjustmentlayer.applyPreset(File(presets.path + presets.adjustment));    // set some parenting    //     curComp.time = 10;    for(var tls = 0; tls < textlayers.length;tls++){      tls.parent = productlayer;    }    brandlayer.parent = productlayer;        } // close mpo2ae.pre_articles loop i    // }  // }  app.endUndoGroup();}// rd_BatchVectorToShape_localize()// // Description:// This function localizes the given string variable based on the current locale.// // Parameters://   strVar - The string variable's name.// // Returns:// String.//function rd_localize(strVar){    if(app.isoLanguage === "en_US"){        return strVar["en"];    }else if(app.isoLanguage === "de_DE"){        return strVar["de"];    }  }function isEmpty(ob){   for(var i in ob){ return false;}  return true;}/** * [escapeRegExp description] * @param  {[type]} str [description] * @return {[type]}     [description] * http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex */function escapeRegExp(str) {  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");}function regdashes(str){          var reg = new RegExp("--","g");          return str.replace(reg,"\u2013");}/** * basic file reading function * @param  {String} type the type of file * @return {String or null} */function readfile(type){  var file_to_read = File.openDialog("Select a "+type+" file to import.", "*."+type,false);  var txt = null;  if (file_to_read !== null) {    file_to_read.open('r','TEXT','????');    txt = file_to_read.read();    file_to_read.close();  }  if(txt !== null){    return txt;  }else{    alert('Error reading file');    return null;  }} }// close mpo_import})(this);